Microsoft (R) Macro Assembler Version 14.31.31105.0	    06/07/22 22:02:48
Program 6 Grant Kopczensk				     Page 1 - 1


				TITLE Program 6 Grant Kopczenski

				; Author: Grant Kopczenski
				; Last Modified: 6/5/2022
				; OSU email address: kopczeng@oregonstate.edu
				; Course number/section:   CS271 Section 001
				; Project Number: 6                Due Date: 6/5/2022
				; Description: This program is for demonstrating low level I/O procedures and macros

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; mGetString macro: prompts the user for a string input and takes the input
				mGetString			MACRO userInput, userPrompt
				  
				  PUSH				ECX
				  PUSH				EDX
				  MOV				EDX, userPrompt
				  CALL				writeString

				  MOV				EDX, userInput
				  MOV				ECX, MAX
				  CALL				readString

				  POP				EDX
				  POP				ECX

				ENDM

				; mDisplayString macro:
				mDisplayString		MACRO value

				  PUSH				EDX

				  MOV				EDX, value
				  CALL				writeInt

				  POP				EDX

				ENDM


 = 0000000F			  MAX				EQU 15

 00000000			.data

				  ; Title and description strings
 00000000 0A 0A 50 72 6F	  titleMessage		BYTE 0ah, 0ah, "Program 6 by Grant Kopczenski",0
	   67 72 61 6D 20
	   36 20 62 79 20
	   47 72 61 6E 74
	   20 4B 6F 70 63
	   7A 65 6E 73 6B
	   69 00
 00000020 0A 54 68 69 73	  description		BYTE 0ah, "This program is for demonstrating low level I/O procedures and macros", 0ah,0
	   20 70 72 6F 67
	   72 61 6D 20 69
	   73 20 66 6F 72
	   20 64 65 6D 6F
	   6E 73 74 72 61
	   74 69 6E 67 20
	   6C 6F 77 20 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 20
	   61 6E 64 20 6D
	   61 63 72 6F 73
	   0A 00

				  ; Instruction and prompt strings
 00000068 0A 50 6C 65 61	  instruction1		BYTE 0ah, "Please enter 10 signed decimal integers.",0
	   73 65 20 65 6E
	   74 65 72 20 31
	   30 20 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 73
	   2E 00
 00000092 0A 45 61 63 68	  instruction2		BYTE 0ah, "Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting the raw numbers I will display a list of the integers with their sum and average value.", 0ah,0
	   20 6E 75 6D 62
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   73 6D 61 6C 6C
	   20 65 6E 6F 75
	   67 68 20 74 6F
	   20 66 69 74 20
	   69 6E 73 69 64
	   65 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 20 77
	   69 74 68 20 74
	   68 65 69 72 20
	   73 75 6D 20 61
	   6E 64 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0A 00
				  
 00000154 0A 45 6E 74 65	  prompt			BYTE 0ah, "Enter a signed number: ",0
	   72 20 61 20 73
	   69 67 6E 65 64
	   20 6E 75 6D 62
	   65 72 3A 20 00
 0000016D 45 52 52 4F 52	  error				BYTE "ERROR: That was not a signed number or it was too big.", 0ah,0
	   3A 20 54 68 61
	   74 20 77 61 73
	   20 6E 6F 74 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 69
	   74 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0A
	   00

 000001A5 0A 59 6F 75 20	  listMessage		BYTE 0ah, "You entered the following numbers: ", 0ah,0
	   65 6E 74 65 72
	   65 64 20 74 68
	   65 20 66 6F 6C
	   6C 6F 77 69 6E
	   67 20 6E 75 6D
	   62 65 72 73 3A
	   20 0A 00
 000001CB 0A 54 68 65 20	  sumMessage		BYTE 0ah, "The sum of all your numbers is: ",0
	   73 75 6D 20 6F
	   66 20 61 6C 6C
	   20 79 6F 75 72
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 000001ED 0A 54 68 65 20	  averageMessage	BYTE 0ah, "The average of all your numbers is: ",0
	   61 76 65 72 61
	   67 65 20 6F 66
	   20 61 6C 6C 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 00000213 2C 20 00		  comma				BYTE ", ",0

				  ; String variables
 00000216  00000010 [		  input				BYTE MAX+1 DUP (?)
	    00
	   ]

				  ; Array and integer variables
 00000226  0000000A [		  array				DWORD 10 DUP (?)
	    00000000
	   ]
 0000024E 00000000		  sum				DWORD 0
 00000252 00000000		  holder			DWORD 0
 00000256 00000000		  negative			DWORD 0
 0000025A 00000000		  element			DWORD 0
 0000025E 00000000		  temp				DWORD 0

				  ; Exit message
 00000262 0A 0A 54 68 61	  goodbye			Byte 0ah, 0ah, "That's all, goodbye!", 0ah,0
	   74 27 73 20 61
	   6C 6C 2C 20 67
	   6F 6F 64 62 79
	   65 21 0A 00




 00000000			.code
 00000000			main PROC
				 

				  ; Displays the title message and description of the program
 00000000  BA 00000000 R	  MOV				EDX, OFFSET titleMessage
 00000005  E8 00000000 E	  CALL				writeString
 0000000A  BA 00000020 R	  MOV				EDX, OFFSET description
 0000000F  E8 00000000 E	  CALL				writeString

				  ; Displays the instructions for the program
 00000014  BA 00000068 R	  MOV				EDX, OFFSET instruction1
 00000019  E8 00000000 E	  CALL				writeString
 0000001E  BA 00000092 R	  MOV				EDX, OFFSET instruction2
 00000023  E8 00000000 E	  CALL				writeString	

				  ; Sets ECX for the loop below
 00000028  B9 0000000A		  MOV				ECX, 10

 0000002D			_InputLoop:

				  ; pushes all the variables needed onto the stack and calls ReadVal, which will take the inputs as a string and convert them to integers
 0000002D  68 0000025A R	  PUSH				OFFSET element
 00000032  68 00000154 R	  PUSH				OFFSET prompt
 00000037  68 00000216 R	  PUSH				OFFSET input
 0000003C  68 00000226 R	  PUSH				OFFSET array
 00000041  68 0000016D R	  PUSH				OFFSET error
 00000046  68 0000024E R	  PUSH				OFFSET sum
 0000004B  E8 00000050		  CALL				ReadVal
 00000050  E2 DB		  LOOP				_InputLoop

 00000052  C7 05 0000025A R	  MOV				element, 0
	   00000000
 0000005C  B9 0000000A		  MOV				ECX, 10

				  ; pushes all the variables needed onto the stack and calls WriteVal, which will display the stats
 00000061  68 00000213 R	  PUSH				OFFSET comma
 00000066  68 00000216 R	  PUSH				OFFSET input
 0000006B  68 0000025A R	  PUSH				OFFSET element
 00000070  68 000001A5 R	  PUSH				OFFSET listMessage
 00000075  68 000001ED R	  PUSH				OFFSET averageMessage
 0000007A  68 000001CB R	  PUSH				OFFSET sumMessage
 0000007F  68 00000226 R	  PUSH				OFFSET array
 00000084  FF 35 0000024E R	  PUSH				sum
 0000008A  E8 000000EB		  CALL				WriteVal



				  ; Displays the goodbye message
 0000008F  BA 00000262 R	  MOV				EDX, OFFSET goodbye
 00000094  E8 00000000 E	  CALL				writeString

					Invoke ExitProcess,0	; exit to operating system
 00000099  6A 00	   *	    push   +000000000h
 0000009B  E8 00000000 E   *	    call   ExitProcess
 000000A0			main ENDP


				  ; ReadVal procedure: calls a macro to take an input from the user and error handles the input while converting the string to an int to be stored
 000000A0			ReadVal PROC

 000000A0  55			  PUSH				EBP
 000000A1  8B EC		  MOV				EBP, ESP
 000000A3  52			  PUSH				EDX
 000000A4  57			  PUSH				EDI
 000000A5  53			  PUSH				EBX
 000000A6  51			  PUSH				ECX
 000000A7  C7 05 00000256 R	  MOV				negative, 0
	   00000000
 000000B1  FC			  CLD
 000000B2  EB 19		  JMP				_FirstIt

				  ; Prints error message and re-prompts the user for an input
 000000B4			_ErrorJump:

 000000B4  8B 7D 0C		  MOV				EDI, [EBP+12]
 000000B7  8B D7		  MOV				EDX, EDI
 000000B9  E8 00000000 E	  CALL				writeString
 000000BE  B8 00000000		  MOV				EAX, 0
 000000C3  C7 05 00000252 R	  MOV				holder, 0
	   00000000

				  
				  ; Jumps here on the first iteration of the error handling loop
 000000CD			_FirstIt:

 000000CD  8B 7D 14		  MOV				EDI, [EBP+20]

				  ; Calls the mGetString macro with parameters passed from the stack
				  mGetString        EDI, [EBP+24]
 000000D0  51		     1	  PUSH				ECX
 000000D1  52		     1	  PUSH				EDX
 000000D2  8B 55 18	     1	  MOV				EDX, [EBP+24]
 000000D5  E8 00000000 E     1	  CALL				writeString
 000000DA  8B D7	     1	  MOV				EDX, EDI
 000000DC  B9 0000000F	     1	  MOV				ECX, MAX
 000000E1  E8 00000000 E     1	  CALL				readString
 000000E6  5A		     1	  POP				EDX
 000000E7  59		     1	  POP				ECX
 000000E8  B9 0000000B		  MOV				ECX, 11 
 000000ED  8B F7		  MOV				ESI, EDI
 000000EF  B8 00000000		  MOV				EAX, 0	
 000000F4  EB 0F  JMP				_Convert

 000000F6			_Negative:
 000000F6  C7 05 00000256 R	  MOV				negative, 1
	   00000001
 00000100  B8 00000000		  MOV				EAX, 0
				 	
 00000105			_Convert:
 00000105  01 05 00000252 R	  ADD				holder, EAX
 0000010B  B8 00000000		  MOV				EAX, 0

 00000110  AC			  LODSB											; LODSB
 00000111  83 F8 00		  CMP				EAX, 0
 00000114  74 2B		  JE				_Exit
 00000116  83 F8 2D		  CMP				EAX, 45
 00000119  74 DB		  JE				_Negative
 0000011B  A3 0000025E R	  MOV				temp, EAX
 00000120  83 E8 30		  SUB				EAX, 48
 00000123  83 F8 09		  CMP				EAX, 9
 00000126  7F 8C		  JG				_ErrorJump
 00000128  A1 00000252 R	  MOV				EAX, holder
 0000012D  6B C0 0A		  IMUL				EAX, 10
 00000130  70 82		  JO				_ErrorJump					; Checks if the overflow flag is set or not
 00000132  A3 00000252 R	  MOV				holder, EAX
 00000137  A1 0000025E R	  MOV				EAX, temp
 0000013C  83 E8 30		  SUB				EAX, 48
 0000013F  E2 C4		  LOOP				_Convert

 00000141			_Exit: 

				  ; Adds the valid input to the sum variable and adds it into the number array
 00000141  8B 1D 00000252 R	  MOV				EBX, holder
 00000147  8B 0D 00000256 R	  MOV				ECX, negative
 0000014D  83 F9 01		  CMP				ECX, 1
 00000150  75 03		  JNE				_NotNegative
 00000152  6B DB FF		  IMUL				EBX, -1

 00000155			_NotNegative:
 00000155  C7 05 00000252 R	  MOV				holder, 0
	   00000000
 0000015F  8B 45 08		  MOV				EAX, [EBP+8]
 00000162  01 18		  ADD				[EAX], EBX

 00000164  8B 75 1C		  MOV				ESI, [EBP+28]
 00000167  8B 06		  MOV				EAX, [ESI]
 00000169  8B 7D 10		  MOV				EDI, [EBP+16]
 0000016C  89 1C 87		  MOV				[EDI+[EAX*4]], EBX

 0000016F  40			  INC				EAX
 00000170  89 06		  MOV				[ESI], EAX

 00000172  59			  POP				ECX
 00000173  5B			  POP				EBX
 00000174  5F			  POP				EDI
 00000175  5A			  POP				EDX
 00000176  5D			  POP				EBP
 00000177  C2 0018		  ret				24
 0000017A			ReadVal ENDP



				  ; This procedure will display the stats of the entered values 
 0000017A			WriteVal PROC
 0000017A  55			  PUSH				EBP
 0000017B  8B EC		  MOV				EBP, ESP
 0000017D  57			  PUSH				EDI
 0000017E  56			  PUSH				ESI
 0000017F  51			  PUSH				ECX
 00000180  50			  PUSH				EAX
 00000181  53			  PUSH				EBX
 00000182  52			  PUSH				EDX
 00000183  FC			  CLD
 00000184  B9 0000000A		  MOV				ECX, 10

 00000189  8B 55 18		  MOV				EDX, [EBP+24]
 0000018C  E8 00000000 E	  CALL				writeString


				  ; This is the loop to output each individual entered number
 00000191			_OutputLoop:
				  
 00000191  8B 7D 0C		  MOV				EDI, [EBP+12]
 00000194  8B 75 1C		  MOV				ESI, [EBP+28]
 00000197  8B 16		  MOV				EDX, [ESI]
 00000199  8B 04 97		  MOV				EAX, [EDI+[EDX*4]]
 0000019C  42			  INC				EDX
 0000019D  89 16		  MOV				[ESI], EDX

				  mDisplayString    EAX
 0000019F  52		     1	  PUSH				EDX
 000001A0  8B D0	     1	  MOV				EDX, EAX
 000001A2  E8 00000000 E     1	  CALL				writeInt
 000001A7  5A		     1	  POP				EDX

 000001A8  83 F9 01		  CMP				ECX, 1
 000001AB  74 0A		  JE				_Break
 000001AD  8B 55 24		  MOV				EDX, [EBP+36]
 000001B0  E8 00000000 E	  CALL				writeString

 000001B5  E2 DA		  LOOP				_OutputLoop

 000001B7			_Break:

				  ; Displays the sum of all the entered numbers
 000001B7  8B 55 10		  MOV				EDX, [EBP+16]
 000001BA  E8 00000000 E	  CALL				writeString
 000001BF  8B 45 08		  MOV				EAX, [EBP+8]
				  mDisplayString	EAX
 000001C2  52		     1	  PUSH				EDX
 000001C3  8B D0	     1	  MOV				EDX, EAX
 000001C5  E8 00000000 E     1	  CALL				writeInt
 000001CA  5A		     1	  POP				EDX


				  ; Performs the calculations for the average and calls the macro to display it
 000001CB  BB 0000000A		  MOV				EBX, 10
 000001D0  33 D2		  XOR				EDX, EDX
 000001D2  F7 F3		  DIV				EBX
 000001D4  8B 55 14		  MOV				EDX, [EBP+20]
 000001D7  E8 00000000 E	  CALL				writeString
				  mDisplayString	EAX
 000001DC  52		     1	  PUSH				EDX
 000001DD  8B D0	     1	  MOV				EDX, EAX
 000001DF  E8 00000000 E     1	  CALL				writeInt
 000001E4  5A		     1	  POP				EDX
				  
 000001E5  5A			  POP				EDX
 000001E6  5B			  POP				EBX
 000001E7  58			  POP				EAX
 000001E8  59			  POP				ECX
 000001E9  5E			  POP				ESI
 000001EA  5F			  POP				EDI
 000001EB  5D			  POP				EBP
 000001EC  C2 001C		  ret				28
 000001EF			WriteVal ENDP
				  
				END main
				  
Microsoft (R) Macro Assembler Version 14.31.31105.0	    06/07/22 22:02:48
Program 6 Grant Kopczensk				     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001EF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000A0 _TEXT	Length= 000000DA Public STDCALL
  _ErrorJump . . . . . . . . . .	L Near	 000000B4 _TEXT	
  _FirstIt . . . . . . . . . . .	L Near	 000000CD _TEXT	
  _Negative  . . . . . . . . . .	L Near	 000000F6 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 00000105 _TEXT	
  _Exit  . . . . . . . . . . . .	L Near	 00000141 _TEXT	
  _NotNegative . . . . . . . . .	L Near	 00000155 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000017A _TEXT	Length= 00000075 Public STDCALL
  _OutputLoop  . . . . . . . . .	L Near	 00000191 _TEXT	
  _Break . . . . . . . . . . . .	L Near	 000001B7 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A0 Public STDCALL
  _InputLoop . . . . . . . . . .	L Near	 0000002D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000226 _DATA	
averageMessage . . . . . . . . .	Byte	 000001ED _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 00000213 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 00000020 _DATA	
element  . . . . . . . . . . . .	DWord	 0000025A _DATA	
error  . . . . . . . . . . . . .	Byte	 0000016D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000262 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
holder . . . . . . . . . . . . .	DWord	 00000252 _DATA	
input  . . . . . . . . . . . . .	Byte	 00000216 _DATA	
instruction1 . . . . . . . . . .	Byte	 00000068 _DATA	
instruction2 . . . . . . . . . .	Byte	 00000092 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMessage  . . . . . . . . . .	Byte	 000001A5 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
negative . . . . . . . . . . . .	DWord	 00000256 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000154 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumMessage . . . . . . . . . . .	Byte	 000001CB _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000024E _DATA	
temp . . . . . . . . . . . . . .	DWord	 0000025E _DATA	
titleMessage . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
