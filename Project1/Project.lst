Microsoft (R) Macro Assembler Version 14.31.31105.0	    05/01/22 19:01:47
	Project 					     Page 1 - 1


				TITLE Project 1

				; Author: Grant Kopczenski
				; Last Modified: 4/17/2022
				; OSU email address: kopczeng@oregonstate.edu
				; Course number/section: CS271 Section 001
				; Project Number: 1                Due Date: 4/17/2022
				; Description: This program will take 3 inputs and will find the sums, differences and quotients with remainders of the inputs
				; Extra Credit: 1) Repeat until the user chooses to quit 2) Check if numbers are not in strictly descending order 3) Calculate and display the quotients A/B, A/C, B/C, printing the quotient and remainder
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.DATA

				  ; Strings for greetings, extra credit and description of the program
 00000000 0A 47 72 61 6E	  greeting			BYTE 0ah, "Grant Kopczenski, Project 1",0
	   74 20 4B 6F 70
	   63 7A 65 6E 73
	   6B 69 2C 20 50
	   72 6F 6A 65 63
	   74 20 31 00
 0000001D 0A 2A 2A 45 58	  extraCredit1		BYTE 0ah, "**EXTRA CREDIT**: The user can Loop through the program if desired",0
	   54 52 41 20 43
	   52 45 44 49 54
	   2A 2A 3A 20 54
	   68 65 20 75 73
	   65 72 20 63 61
	   6E 20 4C 6F 6F
	   70 20 74 68 72
	   6F 75 67 68 20
	   74 68 65 20 70
	   72 6F 67 72 61
	   6D 20 69 66 20
	   64 65 73 69 72
	   65 64 00
 00000061 0A 2A 2A 45 58	  extraCredit2      BYTE 0ah, "**EXTRA CREDIT**: If numbers are not in descending order, the program exits",0
	   54 52 41 20 43
	   52 45 44 49 54
	   2A 2A 3A 20 49
	   66 20 6E 75 6D
	   62 65 72 73 20
	   61 72 65 20 6E
	   6F 74 20 69 6E
	   20 64 65 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2C 20 74
	   68 65 20 70 72
	   6F 67 72 61 6D
	   20 65 78 69 74
	   73 00
 000000AE 0A 2A 2A 45 58	  extraCredit3      BYTE 0ah, "**EXTRA CREDIT**: The Quotient and Remainder will be calculated and displayed for the 3 inputs",0
	   54 52 41 20 43
	   52 45 44 49 54
	   2A 2A 3A 20 54
	   68 65 20 51 75
	   6F 74 69 65 6E
	   74 20 61 6E 64
	   20 52 65 6D 61
	   69 6E 64 65 72
	   20 77 69 6C 6C
	   20 62 65 20 63
	   61 6C 63 75 6C
	   61 74 65 64 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 65 64 20 66
	   6F 72 20 74 68
	   65 20 33 20 69
	   6E 70 75 74 73
	   00
 0000010E 0A 0A 54 68 69	  description		BYTE 0ah, 0ah, "This program will take 3 inputs and will calculate the sums, differences and quotients with remainders of the inputs", 0ah, 0ah,0
	   73 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   74 61 6B 65 20
	   33 20 69 6E 70
	   75 74 73 20 61
	   6E 64 20 77 69
	   6C 6C 20 63 61
	   6C 63 75 6C 61
	   74 65 20 74 68
	   65 20 73 75 6D
	   73 2C 20 64 69
	   66 66 65 72 65
	   6E 63 65 73 20
	   61 6E 64 20 71
	   75 6F 74 69 65
	   6E 74 73 20 77
	   69 74 68 20 72
	   65 6D 61 69 6E
	   64 65 72 73 20
	   6F 66 20 74 68
	   65 20 69 6E 70
	   75 74 73 0A 0A
	   00

				  ; Strings for instructions for the user
 00000187 45 6E 74 65 72	  instructions1		BYTE "Enter the first number: ",0
	   20 74 68 65 20
	   66 69 72 73 74
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000001A0 45 6E 74 65 72	  instructions2		BYTE "Enter the next number: ",0
	   20 74 68 65 20
	   6E 65 78 74 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000001B8 45 6E 74 65 72	  instructions3		BYTE "Enter the final number: ",0
	   20 74 68 65 20
	   66 69 6E 61 6C
	   20 6E 75 6D 62
	   65 72 3A 20 00

				  ; Strings for displaying mathmatical equations
 000001D1 20 2B 20 00		  addition          BYTE " + ",0
 000001D5 20 2D 20 00		  subtraction       BYTE " - ",0
 000001D9 20 3D 20 00		  equals            BYTE " = ",0


				  ; Variables for inputs and sums/difs
 000001DD 00000000		  input1			DWORD ?
 000001E1 00000000		  input2			DWORD ?
 000001E5 00000000		  input3			DWORD ?
 000001E9 00000000		  sum12				DWORD 0                             ; **NOTE** instead of using 'A, B, C' I used '1, 2, 3', which might make this look like "sum of 12" but its really just "sum of number 1 + number 2"
 000001ED 00000000		  dif12				DWORD 0
 000001F1 00000000		  sum13				DWORD 0
 000001F5 00000000		  dif13				DWORD 0
 000001F9 00000000		  sum23				DWORD 0
 000001FD 00000000		  dif23				DWORD 0
 00000201 00000000		  sum123			DWORD 0

				  ; Goodbye message
 00000205 0A 41 6C 6C 20	  goodBye			BYTE 0ah, "All done! Goodbye!", 0ah,0
	   64 6F 6E 65 21
	   20 47 6F 6F 64
	   62 79 65 21 0A
	   00

				  ; *** Extra Credit ***
				  ; EC 1: Program Looping
 0000021A 0A 0A 57 6F 75	  loopPrompt		BYTE 0ah, 0ah, "Would you like to run the program again? (0-No / 1-Yes)",0
	   6C 64 20 79 6F
	   75 20 6C 69 6B
	   65 20 74 6F 20
	   72 75 6E 20 74
	   68 65 20 70 72
	   6F 67 72 61 6D
	   20 61 67 61 69
	   6E 3F 20 28 30
	   2D 4E 6F 20 2F
	   20 31 2D 59 65
	   73 29 00
 00000254 0A 41 6E 73 77	  answerString		BYTE 0ah, "Answer: ",0
	   65 72 3A 20 00
 0000025E 00000000		  answerInt			DWORD 0

				  ; EC 2: Numbers in descending order
 00000262 0A 45 52 52 4F	  error				BYTE 0ah, "ERROR: The entered values are not in descending order.", 0ah,0
	   52 3A 20 54 68
	   65 20 65 6E 74
	   65 72 65 64 20
	   76 61 6C 75 65
	   73 20 61 72 65
	   20 6E 6F 74 20
	   69 6E 20 64 65
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2E
	   0A 00
 0000029B 00000000		  numbersDescending	DWORD 0

				  ; EC 3: Quotients and Remainders
 0000029F 20 2F 20 00		  division          BYTE " / ",0
 000002A3 20 77 69 74 68	  remainder         BYTE " with a remainder of: ",0
	   20 61 20 72 65
	   6D 61 69 6E 64
	   65 72 20 6F 66
	   3A 20 00

 000002BA 00000000		  quotient12        DWORD 0
 000002BE 00000000		  quotient13        DWORD 0
 000002C2 00000000		  quotient23        DWORD 0
 000002C6 00000000		  remainder12		DWORD 0
 000002CA 00000000		  remainder13		DWORD 0
 000002CE 00000000		  remainder23		DWORD 0



 00000000			.CODE
 00000000			main PROC

				  ; Prints the greeting, extra credit done and description
 00000000  BA 00000000 R	  MOV		EDX, OFFSET greeting
 00000005  E8 00000000 E	  CALL		writeString
 0000000A  BA 0000001D R	  MOV		EDX, OFFSET extraCredit1
 0000000F  E8 00000000 E	  CALL		writeString
 00000014  BA 00000061 R	  MOV		EDX, OFFSET extraCredit2
 00000019  E8 00000000 E	  CALL		writeString
 0000001E  BA 000000AE R	  MOV		EDX, OFFSET extraCredit3
 00000023  E8 00000000 E	  CALL		writeString
 00000028  BA 0000010E R	  MOV		EDX, OFFSET description
 0000002D  E8 00000000 E	  CALL		writeString


 00000032			_Loop:												    ; Loop jumps to here when user wants to run program again

 00000032  C7 05 0000029B R	  MOV		numbersDescending, 0                        ; Resets this variable to 0 before checking inputs, added this here mostly for if the user decides to run the program again the ERROR message will 
	   00000000
				                                                        ; still show up when needed


				  ; Code for the inputs                                 ; Prints a message, then takes a number value input
				  ; Input 1
 0000003C  BA 00000187 R	  MOV		EDX, OFFSET instructions1
 00000041  E8 00000000 E	  CALL		writeString
 00000046  E8 00000000 E	  CALL		readInt
 0000004B  A3 000001DD R	  MOV		input1, EAX	

				  ; Input 2
 00000050  BA 000001A0 R	  MOV		EDX, OFFSET instructions2
 00000055  E8 00000000 E	  CALL		writeString
 0000005A  E8 00000000 E	  CALL		readInt
 0000005F  A3 000001E1 R	  MOV		input2, EAX

 00000064  39 05 000001DD R	  CMP		input1, EAX								    ; Compares if the 1st input is less than the 2nd input
 0000006A  0F 8C 000003C6	  JL		_EndProg

				  ; Input 3
 00000070  BA 000001B8 R	  MOV		EDX, OFFSET instructions3
 00000075  E8 00000000 E	  CALL		writeString
 0000007A  E8 00000000 E	  CALL		readInt
 0000007F  A3 000001E5 R	  MOV		input3, EAX

 00000084  39 05 000001E1 R	  CMP		input2, EAX								    ; Compares if the 2nd input is less than the 3rd input
 0000008A  0F 8C 000003A6	  JL		_EndProg

 00000090  C7 05 0000029B R	  MOV		numbersDescending, 1					    ; If all of the numbers are in descending order, this value gets set to 1
	   00000001



				  ; Calculations
				  ; Calculation 1
 0000009A  A1 000001DD R	  MOV		EAX, input1
 0000009F  A3 000001E9 R	  MOV		sum12, EAX
 000000A4  A1 000001E1 R	  MOV		EAX, input2
 000000A9  01 05 000001E9 R	  ADD		sum12, EAX                                  ; Variable 'sum12' has the value stored

				  ; Calculation 2
 000000AF  A1 000001DD R	  MOV		EAX, input1
 000000B4  A3 000001ED R	  MOV		dif12, EAX
 000000B9  A1 000001E1 R	  MOV		EAX, input2
 000000BE  29 05 000001ED R	  SUB		dif12, EAX                                  ; Variable 'dif12' has the value stored

				  ; Calculation 3
 000000C4  A1 000001DD R	  MOV		EAX, input1
 000000C9  A3 000001F1 R	  MOV		sum13, EAX
 000000CE  A1 000001E5 R	  MOV		EAX, input3
 000000D3  01 05 000001F1 R	  ADD		sum13, EAX									; Variable 'sum13' has the value stored
				  
				  ; Calculation 4
 000000D9  A1 000001DD R	  MOV		EAX, input1
 000000DE  A3 000001F5 R	  MOV		dif13, EAX
 000000E3  A1 000001E5 R	  MOV		EAX, input3
 000000E8  29 05 000001F5 R	  SUB		dif13, EAX									; Variable 'dif13' has the value stored 

				  ; Calculation 5
 000000EE  A1 000001E1 R	  MOV		EAX, input2
 000000F3  A3 000001F9 R	  MOV		sum23, EAX
 000000F8  A1 000001E5 R	  MOV		EAX, input3
 000000FD  01 05 000001F9 R	  ADD		sum23, EAX									; Variable 'sum23' has the value stored

				  ; Calculation 6
 00000103  A1 000001E1 R	  MOV		EAX, input2
 00000108  A3 000001FD R	  MOV		dif23, EAX
 0000010D  A1 000001E5 R	  MOV		EAX, input3
 00000112  29 05 000001FD R	  SUB		dif23, EAX									; Variable 'dif23' has the value stored

				  ; Calculation 7
 00000118  A1 000001DD R	  MOV		EAX, input1
 0000011D  A3 00000201 R	  MOV		sum123, EAX
 00000122  A1 000001E1 R	  MOV		EAX, input2
 00000127  01 05 00000201 R	  ADD		sum123, EAX
 0000012D  A1 000001E5 R	  MOV		EAX, input3
 00000132  01 05 00000201 R	  ADD		sum123, EAX									; Variable 'sum123' has the value stored


				  ; Calculation 8									    ; Division Calculations start here
 00000138  A1 000001DD R	  MOV       EAX, input1
 0000013D  8B 1D 000001E1 R	  MOV       EBX, input2
 00000143  33 D2		  XOR       EDX, EDX
 00000145  F7 F3		  DIV       EBX
 00000147  A3 000002BA R	  MOV       quotient12, EAX                             ; Collects the quotient value and stores it to a variable
 0000014C  89 15 000002C6 R	  MOV       remainder12, EDX                            ; Collects the remainder value and stores it to a variable

				  ; Calculation 9									    
 00000152  A1 000001DD R	  MOV       EAX, input1
 00000157  8B 1D 000001E5 R	  MOV       EBX, input3
 0000015D  33 D2		  XOR       EDX, EDX
 0000015F  F7 F3		  DIV       EBX
 00000161  A3 000002BE R	  MOV       quotient13, EAX                             ; Collects the quotient value and stores it to a variable
 00000166  89 15 000002CA R	  MOV       remainder13, EDX                            ; Collects the remainder value and stores it to a variable
				  	
				  ; Calculation 10									    
 0000016C  A1 000001E1 R	  MOV       EAX, input2
 00000171  8B 1D 000001E5 R	  MOV       EBX, input3
 00000177  33 D2		  XOR       EDX, EDX
 00000179  F7 F3		  DIV       EBX
 0000017B  A3 000002C2 R	  MOV       quotient23, EAX                             ; Collects the quotient value and stores it to a variable
 00000180  89 15 000002CE R	  MOV       remainder23, EDX                            ; Collects the remainder value and stores it to a variable



				  ; Outputs
				  ; Output 1
 00000186  E8 00000000 E	  CALL      CRLF
 0000018B  A1 000001DD R	  MOV		EAX, input1
 00000190  BA 000001D1 R	  MOV		EDX, OFFSET addition 
 00000195  E8 00000000 E	  CALL		writeDec
 0000019A  E8 00000000 E	  CALL		writeString
 0000019F  A1 000001E1 R	  MOV       EAX, input2
 000001A4  BA 000001D9 R	  MOV		EDX, OFFSET equals
 000001A9  E8 00000000 E	  CALL		writeDec
 000001AE  E8 00000000 E	  CALL		writeString
 000001B3  A1 000001E9 R	  MOV       EAX, sum12
 000001B8  E8 00000000 E	  CALL      writeDec
 000001BD  E8 00000000 E	  CALL      CRLF

				  ; Output 2
 000001C2  A1 000001DD R	  MOV		EAX, input1
 000001C7  BA 000001D5 R	  MOV		EDX, OFFSET subtraction 
 000001CC  E8 00000000 E	  CALL		writeDec
 000001D1  E8 00000000 E	  CALL		writeString
 000001D6  A1 000001E1 R	  MOV       EAX, input2
 000001DB  BA 000001D9 R	  MOV		EDX, OFFSET equals
 000001E0  E8 00000000 E	  CALL		writeDec
 000001E5  E8 00000000 E	  CALL		writeString
 000001EA  A1 000001ED R	  MOV       EAX, dif12
 000001EF  E8 00000000 E	  CALL      writeDec
 000001F4  E8 00000000 E	  CALL      CRLF

				  ; Output 3
 000001F9  A1 000001DD R	  MOV		EAX, input1
 000001FE  BA 000001D1 R	  MOV		EDX, OFFSET addition 
 00000203  E8 00000000 E	  CALL		writeDec
 00000208  E8 00000000 E	  CALL		writeString
 0000020D  A1 000001E5 R	  MOV       EAX, input3
 00000212  BA 000001D9 R	  MOV		EDX, OFFSET equals
 00000217  E8 00000000 E	  CALL		writeDec
 0000021C  E8 00000000 E	  CALL		writeString
 00000221  A1 000001F1 R	  MOV       EAX, sum13
 00000226  E8 00000000 E	  CALL      writeDec
 0000022B  E8 00000000 E	  CALL      CRLF

				  ; Output 4
 00000230  A1 000001DD R	  MOV		EAX, input1
 00000235  BA 000001D5 R	  MOV		EDX, OFFSET subtraction 
 0000023A  E8 00000000 E	  CALL		writeDec
 0000023F  E8 00000000 E	  CALL		writeString
 00000244  A1 000001E5 R	  MOV       EAX, input3
 00000249  BA 000001D9 R	  MOV		EDX, OFFSET equals
 0000024E  E8 00000000 E	  CALL		writeDec
 00000253  E8 00000000 E	  CALL		writeString
 00000258  A1 000001F5 R	  MOV       EAX, dif13
 0000025D  E8 00000000 E	  CALL      writeDec
 00000262  E8 00000000 E	  CALL      CRLF

				  ; Output 5
 00000267  A1 000001E1 R	  MOV		EAX, input2
 0000026C  BA 000001D1 R	  MOV		EDX, OFFSET addition 
 00000271  E8 00000000 E	  CALL		writeDec
 00000276  E8 00000000 E	  CALL		writeString
 0000027B  A1 000001E5 R	  MOV       EAX, input3
 00000280  BA 000001D9 R	  MOV		EDX, OFFSET equals
 00000285  E8 00000000 E	  CALL		writeDec
 0000028A  E8 00000000 E	  CALL		writeString
 0000028F  A1 000001F9 R	  MOV       EAX, sum23
 00000294  E8 00000000 E	  CALL      writeDec
 00000299  E8 00000000 E	  CALL      CRLF

				  ; Output 6
 0000029E  A1 000001E1 R	  MOV		EAX, input2
 000002A3  BA 000001D5 R	  MOV		EDX, OFFSET subtraction 
 000002A8  E8 00000000 E	  CALL		writeDec
 000002AD  E8 00000000 E	  CALL		writeString
 000002B2  A1 000001E5 R	  MOV       EAX, input3
 000002B7  BA 000001D9 R	  MOV		EDX, OFFSET equals
 000002BC  E8 00000000 E	  CALL		writeDec
 000002C1  E8 00000000 E	  CALL		writeString
 000002C6  A1 000001FD R	  MOV       EAX, dif23
 000002CB  E8 00000000 E	  CALL      writeDec
 000002D0  E8 00000000 E	  CALL      CRLF

				  ; Output 7
 000002D5  A1 000001DD R	  MOV		EAX, input1
 000002DA  BA 000001D1 R	  MOV		EDX, OFFSET addition 
 000002DF  E8 00000000 E	  CALL		writeDec
 000002E4  E8 00000000 E	  CALL		writeString
 000002E9  A1 000001E1 R	  MOV       EAX, input2
 000002EE  BA 000001D1 R	  MOV		EDX, OFFSET addition
 000002F3  E8 00000000 E	  CALL		writeDec
 000002F8  E8 00000000 E	  CALL		writeString
 000002FD  A1 000001E5 R	  MOV       EAX, input3
 00000302  BA 000001D9 R	  MOV		EDX, OFFSET equals
 00000307  E8 00000000 E	  CALL		writeDec
 0000030C  E8 00000000 E	  CALL		writeString
 00000311  A1 00000201 R	  MOV       EAX, sum123
 00000316  E8 00000000 E	  CALL      writeDec
 0000031B  E8 00000000 E	  CALL      CRLF
 00000320  E8 00000000 E	  CALL      CRLF


				  ; Output 8                                            ; Division outputs start here
 00000325  A1 000001DD R	  MOV		EAX, input1
 0000032A  BA 0000029F R	  MOV		EDX, OFFSET division
 0000032F  E8 00000000 E	  CALL		writeDec
 00000334  E8 00000000 E	  CALL		writeString
 00000339  A1 000001E1 R	  MOV       EAX, input2
 0000033E  BA 000001D9 R	  MOV       EDX, OFFSET equals
 00000343  E8 00000000 E	  CALL		writeDec
 00000348  E8 00000000 E	  CALL		writeString
 0000034D  A1 000002BA R	  MOV		EAX, quotient12
 00000352  E8 00000000 E	  CALL		writeDec
 00000357  A1 000002C6 R	  MOV		EAX, remainder12
 0000035C  BA 000002A3 R	  MOV		EDX, OFFSET remainder
 00000361  E8 00000000 E	  CALL		writeString
 00000366  E8 00000000 E	  CALL		writeDec
 0000036B  E8 00000000 E	  CALL      CRLF

				  ; Output 9
 00000370  A1 000001DD R	  MOV		EAX, input1
 00000375  BA 0000029F R	  MOV		EDX, OFFSET division
 0000037A  E8 00000000 E	  CALL		writeDec
 0000037F  E8 00000000 E	  CALL		writeString
 00000384  A1 000001E5 R	  MOV       EAX, input3
 00000389  BA 000001D9 R	  MOV       EDX, OFFSET equals
 0000038E  E8 00000000 E	  CALL		writeDec
 00000393  E8 00000000 E	  CALL		writeString
 00000398  A1 000002BE R	  MOV		EAX, quotient13
 0000039D  E8 00000000 E	  CALL		writeDec
 000003A2  A1 000002CA R	  MOV		EAX, remainder13
 000003A7  BA 000002A3 R	  MOV		EDX, OFFSET remainder
 000003AC  E8 00000000 E	  CALL		writeString
 000003B1  E8 00000000 E	  CALL		writeDec
 000003B6  E8 00000000 E	  CALL      CRLF
				  
				  ; Output 10
 000003BB  A1 000001E1 R	  MOV		EAX, input2
 000003C0  BA 0000029F R	  MOV		EDX, OFFSET division
 000003C5  E8 00000000 E	  CALL		writeDec
 000003CA  E8 00000000 E	  CALL		writeString
 000003CF  A1 000001E5 R	  MOV       EAX, input3
 000003D4  BA 000001D9 R	  MOV       EDX, OFFSET equals
 000003D9  E8 00000000 E	  CALL		writeDec
 000003DE  E8 00000000 E	  CALL		writeString
 000003E3  A1 000002C2 R	  MOV		EAX, quotient23
 000003E8  E8 00000000 E	  CALL		writeDec
 000003ED  A1 000002CE R	  MOV		EAX, remainder23
 000003F2  BA 000002A3 R	  MOV		EDX, OFFSET remainder
 000003F7  E8 00000000 E	  CALL		writeString
 000003FC  E8 00000000 E	  CALL		writeDec
 00000401  E8 00000000 E	  CALL      CRLF



				  ; Loop Prompt                                         ; Will ask user if they want to run the program again, then take a 1 or 0 answer
 00000406  BA 0000021A R	  MOV		EDX, OFFSET loopPrompt
 0000040B  E8 00000000 E	  CALL		writeString
 00000410  BA 00000254 R	  MOV		EDX, OFFSET answerString
 00000415  E8 00000000 E	  CALL		writeString
 0000041A  E8 00000000 E	  CALL		readInt
 0000041F  A3 0000025E R	  MOV		answerInt, EAX
 00000424  E8 00000000 E	  CALL      CRLF

 00000429  83 3D 0000025E R	  CMP		answerInt, 1
	   01
 00000430  0F 84 FFFFFBFC	  JE _Loop											    ; Jumps back to user inputs if the user answer yes to running the program again



 00000436			_EndProg:
 00000436  83 3D 0000029B R	  CMP		numbersDescending, 1
	   01
 0000043D  74 0A		  JE		_NoError								    ; Does not print an error if all numbers were in descending order, variable numbersDescending is set to 0 or 1 when the user is entering the inputs
 0000043F  BA 00000262 R	  MOV		EDX, OFFSET error
 00000444  E8 00000000 E	  CALL		writeString

 00000449			_NoError:
				  ; Exit print
 00000449  BA 00000205 R	  MOV		EDX, OFFSET goodBye
 0000044E  E8 00000000 E	  CALL		writeString

				  Invoke ExitProcess,0
 00000453  6A 00	   *	    push   +000000000h
 00000455  E8 00000000 E   *	    call   ExitProcess
 0000045A			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.31.31105.0	    05/01/22 19:01:47
	Project 					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000045A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000045A Public STDCALL
  _Loop  . . . . . . . . . . . .	L Near	 00000032 _TEXT	
  _EndProg . . . . . . . . . . .	L Near	 00000436 _TEXT	
  _NoError . . . . . . . . . . .	L Near	 00000449 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addition . . . . . . . . . . . .	Byte	 000001D1 _DATA	
answerInt  . . . . . . . . . . .	DWord	 0000025E _DATA	
answerString . . . . . . . . . .	Byte	 00000254 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 0000010E _DATA	
dif12  . . . . . . . . . . . . .	DWord	 000001ED _DATA	
dif13  . . . . . . . . . . . . .	DWord	 000001F5 _DATA	
dif23  . . . . . . . . . . . . .	DWord	 000001FD _DATA	
division . . . . . . . . . . . .	Byte	 0000029F _DATA	
equals . . . . . . . . . . . . .	Byte	 000001D9 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000262 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCredit1 . . . . . . . . . .	Byte	 0000001D _DATA	
extraCredit2 . . . . . . . . . .	Byte	 00000061 _DATA	
extraCredit3 . . . . . . . . . .	Byte	 000000AE _DATA	
goodBye  . . . . . . . . . . . .	Byte	 00000205 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
input1 . . . . . . . . . . . . .	DWord	 000001DD _DATA	
input2 . . . . . . . . . . . . .	DWord	 000001E1 _DATA	
input3 . . . . . . . . . . . . .	DWord	 000001E5 _DATA	
instructions1  . . . . . . . . .	Byte	 00000187 _DATA	
instructions2  . . . . . . . . .	Byte	 000001A0 _DATA	
instructions3  . . . . . . . . .	Byte	 000001B8 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loopPrompt . . . . . . . . . . .	Byte	 0000021A _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbersDescending  . . . . . . .	DWord	 0000029B _DATA	
quotient12 . . . . . . . . . . .	DWord	 000002BA _DATA	
quotient13 . . . . . . . . . . .	DWord	 000002BE _DATA	
quotient23 . . . . . . . . . . .	DWord	 000002C2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder12  . . . . . . . . . .	DWord	 000002C6 _DATA	
remainder13  . . . . . . . . . .	DWord	 000002CA _DATA	
remainder23  . . . . . . . . . .	DWord	 000002CE _DATA	
remainder  . . . . . . . . . . .	Byte	 000002A3 _DATA	
subtraction  . . . . . . . . . .	Byte	 000001D5 _DATA	
sum123 . . . . . . . . . . . . .	DWord	 00000201 _DATA	
sum12  . . . . . . . . . . . . .	DWord	 000001E9 _DATA	
sum13  . . . . . . . . . . . . .	DWord	 000001F1 _DATA	
sum23  . . . . . . . . . . . . .	DWord	 000001F9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
